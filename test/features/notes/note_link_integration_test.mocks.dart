// Mocks generated by Mockito 5.4.4 from annotations
// in todolist/test/features/notes/note_link_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todolist/src/domain/entities/note.dart' as _i4;
import 'package:todolist/src/domain/repositories/note_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i2.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Note>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Stream<List<_i4.Note>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Note>>.empty(),
      ) as _i3.Stream<List<_i4.Note>>);

  @override
  _i3.Future<_i4.Note?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Note?>.value(),
      ) as _i3.Future<_i4.Note?>);

  @override
  _i3.Stream<_i4.Note?> watchById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #watchById,
          [id],
        ),
        returnValue: _i3.Stream<_i4.Note?>.empty(),
      ) as _i3.Stream<_i4.Note?>);

  @override
  _i3.Future<void> save(_i4.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [note],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveAll(Iterable<_i4.Note>? notes) => (super.noSuchMethod(
        Invocation.method(
          #saveAll,
          [notes],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAll(Iterable<String>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [ids],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Note>> getByCategory(_i4.NoteCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByCategory,
          [category],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getByTag(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #getByTag,
          [tag],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getPinned() => (super.noSuchMethod(
        Invocation.method(
          #getPinned,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getArchived() => (super.noSuchMethod(
        Invocation.method(
          #getArchived,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getByFolder(String? folderPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByFolder,
          [folderPath],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> search(String? query) => (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getRecentlyViewed({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentlyViewed,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<List<_i4.Note>> getRecentlyUpdated({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentlyUpdated,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);
}
